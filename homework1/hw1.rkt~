#lang racket

(define (product-digits n)
  (define (digit-iter current result)
    (if (> current 0)
        (digit-iter (quotient current 10)
                    (* result (remainder current 10)))
        result))
  (digit-iter n 1))

(define (multiply-squares x y)
  (* x x y y))

(define (sum-of-squares a b c)
  (* 2
     (+ (multiply-squares a b)
        (multiply-squares a c)
        (multiply-squares b c))))

(define (fourth-power a)
  (* a a a a))
  
(define (heron a b c)
  (* (/ 1 4)
     (sqrt (- (sum-of-squares a b c)
              (+ (fourth-power a)
                 (fourth-power b)
                 (fourth-power c))))))

(define (prime? n)
  (define (prime-iter? i)
    (cond
      [(> (* i i) n) #t]
      [(= (remainder n i) 0) #f]
      [else (prime-iter? (+ i 1))]))
  (if (= n 1)
      #f
      (prime-iter? 2)))
